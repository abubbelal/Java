<?import javafx.geometry.Insets?>
<?import javafx.scene.layout.GridPane?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.ColumnConstraints?>
<!--<GridPane fx:controller="sample.Controller"-->
<!--          xmlns:fx="http://javafx.com/fxml" alignment="top_center" hgap="10" vgap="10"-->
<!--          gridLinesVisible="true">-->

<!--    <padding>-->
<!--        <Insets top="10"/> &lt;!&ndash; gap between top and first row &ndash;&gt;-->
<!--    </padding>-->
<!--&lt;!&ndash;    <columnConstraints>&ndash;&gt;-->
<!--&lt;!&ndash;        <ColumnConstraints percentWidth="50.0"/> &lt;!&ndash; the first column will always cover 50% &ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;        <ColumnConstraints percentWidth="50.0"/> &lt;!&ndash; the second column will always cover 50% &ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;    </columnConstraints>&ndash;&gt;-->
<!--&lt;!&ndash;-->
<!--    If we don't specify the rows or columns all the buttons will get stacked on top of their default position.-->
<!--&ndash;&gt;-->
<!--    <Button text="Button One" GridPane.rowIndex="0" GridPane.columnIndex="0" GridPane.halignment="RIGHT"/>-->
<!--    <Button text="Button Two" GridPane.rowIndex="0" GridPane.columnIndex="1"/>-->
<!--    <Button text="Button Three" GridPane.rowIndex="3" GridPane.columnIndex="0"/>-->
<!--    <Button text="Button Four" GridPane.rowIndex="1" GridPane.columnIndex="1"/>-->
<!--    <Button text="Button Five is long. " GridPane.rowIndex="2" GridPane.columnIndex="0" GridPane.columnSpan="2"/>-->
<!--</GridPane>-->

<!--
    h box lays out its children horizontally in a single row and sizes its children to their preferred widths;
    and if there is any space left over it will stretch itself to fill the excess gap rather than stretching
    its children.

    What it does on any extra height depends on the fill height property. By default it's true so it will stretch
    itself to cover the excess height. When it's false it will stretch it's children. Some children can't be
    resized so the space will be left empty.
-->

<!--<?import javafx.scene.layout.BorderPane?>-->
<!--<?import javafx.scene.layout.HBox?>-->

<!--<BorderPane fx:controller="sample.Controller"-->
<!--            xmlns:fx="http://javafx.com/fxml" >-->
<!--    <top>-->
<!--        <Label text="This label should be in the top position" BorderPane.alignment="CENTER"-->
<!--            style="-fx-border-color: blue; -fx-border-width: 1; -fx-border-style: dashed"/>-->
<!--    </top>-->

<!--    <center>-->
<!--        <Label text="This label is in the center position with a really long text"/>-->
<!--    </center>-->

<!--    <left>-->
<!--        <Label text="This label is in the left position" alignment="center"/>-->
<!--    </left>-->

<!--    <right>-->
<!--        <Label text="This label is in the right position" alignment="center"/>-->
<!--    </right>-->

<!--    <bottom>-->
<!--        <HBox spacing="10" alignment="TOP_RIGHT"-->
<!--            style="-fx-border-color: red; -fx-border-width: 1; -fx-border-style: dashed">-->
<!--            <padding>-->
<!--                <Insets bottom="10" right="10"/>-->
<!--            </padding>-->
<!--            <Button text="Okay" prefWidth="90"/>-->
<!--            <Button text="Cancel" prefWidth="90"/>-->
<!--            <Button text="Help" prefWidth="90"/>-->
<!--        </HBox>-->
<!--    </bottom>-->

<!--</BorderPane>-->

<?import javafx.scene.layout.FlowPane?>
<?import javafx.scene.layout.TilePane?>
<TilePane fx:controller="sample.Controller" xmlns:fx="http://javafx.com/fxml" orientation="HORIZONTAL">
    <Button text="Button One"/>
    <Button text="Button Two"/>
    <Button text="Button Three"/>
    <Button text="Button Four"/>
    <Button text="Button Five"/>
    <Button text="Button Six"/>
    <Button text="Button Seven"/>
    <Button text="Button Eight"/>
    <Button text="Button Nine"/>
    <Button text="Button Ten"/>
</TilePane>

<?import javafx.scene.layout.StackPane?>
<!--
The order in which we add the children is the order in which the elements are added in the stack pane
and layed on top of each other
-->
<!--<StackPane fx:controller="sample.Controller" xmlns:fx="http://javafx.com/fxml">-->
<!--    <Label text="The label text" style="-fx-background-color: green"/>-->
<!--    <Button text="Button One" style="-fx-background-color: red"/>-->
<!--    <Label text="The label text" style="-fx-background-color: blue"/>-->
<!--</StackPane>-->